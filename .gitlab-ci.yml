stages:          # List of stages for jobs, and their order of execution
  - build
  - test
  - docker-build
  - deploy

build:       # This job runs in the build stage, which runs first.
  stage: build
  image: node
  cache:
    - key:
        files:
          - yarn.lock
      paths:
        - .yarn-cache/
  script: 
    - echo "Start building App"
    - yarn install --network-timeout=30000 --cache-folder .yarn-cache
    - echo "$ENV_FILE" | tr -d '\r' > .env
    - yarn run build
    - echo "Build successfully!"
  only:
    refs:
      - main

test:   # This job runs in the test stage.
  stage: test
  image: node
  script:
    - echo "Running tests"
    - yarn add react-scripts
    - CI=true yarn run test
    - echo "Test successfully"
  only:
    refs:
      - main

lint:   # This job also runs in the test stage.
  stage: test
  image: node
  script:
    - echo "Linting code"
    - yarn add react-scripts
    - CI=true yarn run lint
    - sleep 1
    - echo "Done"
  only:
    refs:
      - main

variables:
  DOCKER_HOST: tcp://docker:2375/
  DOCKER_DRIVER: overlay2

services: 
  - docker:dind

docker-build:
  stage: docker-build
  image: jdrouet/docker-with-buildx:stable
  before_script:
    - echo "$ENV_FILE" | tr -d '\r' > .env
    - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" "$CI_REGISTRY"
  script:
    - docker run --rm --privileged multiarch/qemu-user-static --reset -p yes
    - docker buildx create --driver docker-container --use
    - docker buildx inspect --bootstrap
    - docker buildx build --push --platform linux/arm64/v8 --pull -t "$CI_REGISTRY_IMAGE" .
  only:
    refs:
      - main
deploy:
  image: ubuntu:latest
  stage: deploy
  before_script:
    - echo "preparing tunnel"
    - apt-get -qq -o=Dpkg::Use-Pty=0 update 
    - DEBIAN_FRONTEND=noninteractive apt-get -yqq install curl 2> /dev/null
    - mkdir -p --mode=0755 /usr/share/keyrings
    - curl -fsSL https://pkg.cloudflare.com/cloudflare-main.gpg | tee /usr/share/keyrings/cloudflare-main.gpg >/dev/null
    - echo 'deb [signed-by=/usr/share/keyrings/cloudflare-main.gpg] https://pkg.cloudflare.com/cloudflared focal main' | tee /etc/apt/sources.list.d/cloudflared.list

    - apt-get -qq -o=Dpkg::Use-Pty=0 update
    - DEBIAN_FRONTEND=noninteractive apt-get -y -qq -o=Dpkg::Use-Pty=0 install ssh git cloudflared 2> /dev/null
    - cloudflared --version

    - echo "preparing ssh"
    - echo "$SSH_PRIVATE_KEY" | tr -d '\r' > key.pem
    - chmod 400 key.pem
    - echo "$SSH_CONFIG" | tr -d '\r' > /etc/ssh/ssh_config.d/config.conf
    - echo "deploying"
  script:
    - ssh -4 -o StrictHostKeyChecking=no -i key.pem rpi@$PROD_SERVER_IP "docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" $CI_REGISTRY"
    - ssh -4 -o StrictHostKeyChecking=no -i key.pem rpi@$PROD_SERVER_IP "docker pull registry.gitlab.com/samuelslavka/site-frontend"
    - ssh -4 -o StrictHostKeyChecking=no -i key.pem rpi@$PROD_SERVER_IP "docker stop frontend || true && docker rm frontend || true"
    - ssh -4 -o StrictHostKeyChecking=no -i key.pem rpi@$PROD_SERVER_IP "docker run --platform linux/arm64 -d -p 3000:3000 --name frontend registry.gitlab.com/samuelslavka/site-frontend"
  only:
    refs:
      - main