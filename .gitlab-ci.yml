# This file is a template, and might need editing before it works on your project.
# This is a sample GitLab CI/CD configuration file that should run without any modifications.
# It demonstrates a basic 3 stage CI/CD pipeline. Instead of real tests or scripts,
# it uses echo commands to simulate the pipeline execution.
#
# A pipeline is composed of independent jobs that run scripts, grouped into stages.
# Stages run in sequential order, but jobs within stages run in parallel.
#
# For more information, see: https://docs.gitlab.com/ee/ci/yaml/index.html#stages
#
# You can copy and paste this template into a new `.gitlab-ci.yml` file.
# You should not add this template to an existing `.gitlab-ci.yml` file by using the `include:` keyword.
#
# To contribute improvements to CI/CD templates, please follow the Development guide at:
# https://docs.gitlab.com/ee/development/cicd/templates.html
# This specific template is located at:
# https://gitlab.com/gitlab-org/gitlab/-/blob/master/lib/gitlab/ci/templates/Getting-Started.gitlab-ci.yml

stages:          # List of stages for jobs, and their order of execution
  # - build
  # - test
  # - docker-build
  - deploy

# build:       # This job runs in the build stage, which runs first.
#   stage: build
#   image: node
#   script: 
#     - echo "Start building App"
#     - yarn install
#     - yarn run build
#     - echo "Build successfully!"

# test:   # This job runs in the test stage.
#   stage: test
#   image: node
#   script:
#     - echo "Running tests"
#     - yarn add react-scripts
#     - CI=true yarn run test
#     - echo "Test successfully"

# lint:   # This job also runs in the test stage.
#   stage: test
#   image: node
#   script:
#     - echo "Linting code todo finsih"
#     - sleep 1
#     - echo "Done"


# docker-build:
#   stage: docker-build
  # image: docker:latest
  # services: 
  #   - name: docker:19.03.8-dind
#   before_script:
#     - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" $CI_REGISTRY
#   script:
#     - docker build --pull -t "$CI_REGISTRY_IMAGE" .
#     - docker push "$CI_REGISTRY_IMAGE"


deploy:
  stage: deploy
  image: kroniak/ssh-client
  before_script:
    - echo "deploying app"
  script:
    - echo "$SSH_PRIVATE_KEY" | tr -d '\r' > key.pem
    - chmod 400 key.pem
    - ssh -o StrictHostKeyChecking=no -i key.pem rpi@$PROD_SERVER_IP "docker pull registry.gitlab.com/SamuelSlavka/site-frontend"
    - ssh -o StrictHostKeyChecking=no -i key.pem rpi@$PROD_SERVER_IP "docker stop frontend || true && docker rm frontend || true"
    - ssh -o StrictHostKeyChecking=no -i key.pem rpi@$PROD_SERVER_IP "docker run -p 3001:3000 -d --name frontend registry.gitlab.com/SamuelSlavka/frontend"

